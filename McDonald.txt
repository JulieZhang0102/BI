-- Team Name: YZZ Team Members:Qifei Yuan, Jiashu Zhang, Chenyu Zou
CREATE DATABASE McDonalds;
GO

USE McDonalds;
GO

-- Create the Supplier table
CREATE TABLE Supplier(
  SupplierID bigint NOT NULL PRIMARY KEY,
  SupplierName varchar(50) NOT NULL,
  State varchar(50) NOT NULL,
  City varchar(50) NOT NULL,
  Address varchar(50) NOT NULL,
  ContactName varchar(50) NOT NULL,
  ContactPhone varchar(50) NOT NULL);
-- Create the Employee table
CREATE TABLE Employee(
  EmployeeID bigint NOT NULL PRIMARY KEY,
  FirstName varchar(50) NOT NULL,
  LastName varchar(50) NOT NULL,
  JobTitle varchar(50) NOT NULL,
  Gender varchar(50) NOT NULL,
  StoreID bigint NOT NULL);
-- Create the Store table
CREATE TABLE Store(
  StoreID bigint NOT NULL PRIMARY KEY,
  State varchar(50) NOT NULL,
  City varchar(50) NOT NULL,
  Address varchar(50) NOT NULL,
  MenuKey bigint NOT NULL);
  -- Create the Transaction table
CREATE TABLE Transactions(
  TransactionID bigint NOT NULL PRIMARY KEY,
  Date datetime NOT NULL,
  Time datetime NOT NULL,
  TotalAmount bigint NOT NULL,
  StoreID bigint NOT NULL);
   -- Create the TransactionItem table
CREATE TABLE TransactionItem(
  TransactionItemID bigint NOT NULL PRIMARY KEY,
  TransactionID bigint NOT NULL,
  ItemID bigint NOT NULL);
    -- Create the Item table
CREATE TABLE Item(
  ItemID bigint NOT NULL PRIMARY KEY,
  Name varchar(50) NOT NULL,
  Price bigint NOT NULL,
  MenuKey bigint NOT NULL);
   -- Create the Menu table
CREATE TABLE Menu(
  MenuKey bigint NOT NULL PRIMARY KEY);
  -- Create the Recipe table
CREATE TABLE Recipe(
  RecipeID bigint NOT NULL PRIMARY KEY,
  ItemID bigint NOT NULL,
  IngredientID bigint NOT NULL,
  IngredientAmount bigint NOT NULL);
    -- Create the Ingredient table
CREATE TABLE Ingredient(
  IngredientID bigint NOT NULL PRIMARY KEY,
  MeasurementUnit bigint NOT NULL);
-- Create the WhoSupplies table
CREATE TABLE WhoSupplies(
  WhoSuppliesID bigint NOT NULL PRIMARY KEY,
  SupplierID bigint NOT NULL,
  IngredientID bigint NOT NULL);

  -- Create the relationship for Employee Table and Store
ALTER TABLE Employee ADD CONSTRAINT FK_Employee_Store 
FOREIGN KEY (StoreID) REFERENCES Store(StoreID);
GO

  -- Create the relationship for Employee Table and Store
ALTER TABLE Employee ADD CONSTRAINT FK_Employee_Store 
FOREIGN KEY (StoreID) REFERENCES Store(StoreID);
GO

  -- Create the relationship for Store Table and Menu
ALTER TABLE Store ADD CONSTRAINT FK_Store_Menu 
FOREIGN KEY (MenuKey) REFERENCES Menu(MenuKey);
GO

  -- Create the relationship for Store Table and Transactions
ALTER TABLE Transactions ADD CONSTRAINT FK_Store_Transaction 
FOREIGN KEY (StoreID) REFERENCES Store(StoreID);
GO

  -- Create the relationship for Transactions Table and TransactionItem
ALTER TABLE TransactionItem ADD CONSTRAINT FK_Transactions_TransactionItem 
FOREIGN KEY (TransactionID) REFERENCES Transactions(TransactionID);
GO
  -- Create the relationship for TransactionItem Table and Item
ALTER TABLE TransactionItem ADD CONSTRAINT FK_TransactionItem_Item 
FOREIGN KEY (ItemID) REFERENCES Item(ItemID);
GO
-- We will use designer view to create another relationship: the second FK in TransactionItem

-- Create the relationship for Menu Table and Item
ALTER TABLE Item ADD CONSTRAINT FK_Menu_Item 
FOREIGN KEY (MenuKey) REFERENCES Menu(MenuKey);
GO
-- Create the relationship for Recipe Table and Item
ALTER TABLE Recipe ADD CONSTRAINT FK_Recipe_Item 
FOREIGN KEY (ItemID) REFERENCES Item(ItemID);
GO
-- Create the relationship for Recipe Table and Ingredient
ALTER TABLE Recipe ADD CONSTRAINT FK_Recipe_Ingredient 
FOREIGN KEY (IngredientID) REFERENCES Ingredient(IngredientID);
GO
-- Create the relationship for WhoSupplies Table and Ingredient
ALTER TABLE WhoSupplies ADD CONSTRAINT FK_WhoSupplies_Ingredient 
FOREIGN KEY (IngredientID) REFERENCES Ingredient(IngredientID);
GO
-- Create the relationship for WhoSupplies Table and Supplier
ALTER TABLE WhoSupplies ADD CONSTRAINT FK_WhoSupplies_Supplier 
FOREIGN KEY (SupplierID) REFERENCES Supplier(SupplierID);
GO
-- We will use designer view to create another relationship: the second FK in WhoSupplies

-- Add a few students
INSERT INTO Student (StudentID, FirstName, LastName) VALUES 
(1, 'Yinmeng', 'Tian'),
(2, 'Samuel', 'Gaudet'),
(3, 'Anthony', 'Krichevskiy'),
(4, 'Christian', 'Thompson'),
(5, 'Sang Won', 'Baek'),
(6, 'Matthew', 'Michalke'),
(7, 'Jonathan', 'Marchetti'),
(8, 'Edward', 'Lehr'),
(9, 'Patrick', 'Carney'),
(10, 'Emma', 'Sewell');


-- Add a few courses
INSERT INTO Course(CourseID, CourseTitle, Instuctor) VALUES 
(1, 'MIS3545-BUSINESS INTELLIGENCE AND DATA ANALYTICS', 'Zhi'),
(2, 'MIS3690-WEB TECHNOLOGIES', 'Shankar'),
(3, 'QTM3000-CASE STUDIES IN BUSINESS ANALYTICS', 'Nathan'),
(4, 'QTM3625-FINANCIAL SIMULATION', 'Dessi'),
(5, 'SME2012-MANAGING INFORMATION TECH AND SYSTEMS', 'Clare');
GO

-- If we want to delete SME2012
DELETE FROM Course
WHERE CourseTitle like 'SME%';
GO 


-- We will use data view to add grade data


-- Some queries
SELECT * FROM Student;
SELECT * FROM Course;
SELECT * FROM CourseEnrollment;

GO

-- Create a handy view summarizing students' grades
CREATE VIEW vwStudentGradeSummary WITH SCHEMABINDING AS
 SELECT
   s.StudentID, s.FirstName, s.LastName, 
   ISNULL(COUNT(ce.CourseID), 0) AS NumberOfCourses,
   ISNULL(SUM(ce.Grade), 0) AS TotalGrade
  FROM
   dbo.Student AS s
   LEFT OUTER JOIN dbo.CourseEnrollment AS ce ON s.StudentID = ce.StudentID
  GROUP BY
   s.StudentID, s.FirstName, s.LastName
GO


SELECT * FROM vwStudentGradeSummary;
